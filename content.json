{"pages":[{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to","link":"/2020/01/13/hello-word/"},{"title":"Hello World","text":"作为一名开发人员，阅读源码是一个很好的学习方式。本文将结合《Spring源码深度解析》来分析Spring 5.0.6版本的源代码，若有描述错误之处，欢迎指正。Spring是2003年兴起的一个轻量级Java开源框架，旨在解决企业应用开发的复杂性。Spring发展至今，衍生出非常丰富的模块，并应用在多种场景，比如：桌面应用，Web应用等。Spring的模块化可以允许你只使用需要的模块，而不必全部引入。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public WebApplicationContext initWebApplicationContext(ServletContext servletContext) { //保证只有一个WebApplicationContext //从ServletContext查找WebApplicationContext实例,如果已经存在,则抛出异常 //典型异常:在web.xml中配置了不止一个ContextLoaderListener,造成多次初始化 if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) { throw new IllegalStateException(\"Cannot initialize context because there is already a root application context present - check whether you have multiple ContextLoader* definitions in your web.xml!\"); } else { servletContext.log(\"Initializing Spring root WebApplicationContext\"); Log logger = LogFactory.getLog(ContextLoader.class); if (logger.isInfoEnabled()) { logger.info(\"Root WebApplicationContext: initialization started\"); } long startTime = System.currentTimeMillis(); try { if (this.context == null) { //创建WebApplicationContext实例,其实这里创建的是它的子类ConfigurableWebApplicationContext this.context = this.createWebApplicationContext(servletContext); } if (this.context instanceof ConfigurableWebApplicationContext) { ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext)this.context; if (!cwac.isActive()) { if (cwac.getParent() == null) { ApplicationContext parent = this.loadParentContext(servletContext); cwac.setParent(parent); } this.configureAndRefreshWebApplicationContext(cwac, servletContext); } } servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context); ClassLoader ccl = Thread.currentThread().getContextClassLoader(); if (ccl == ContextLoader.class.getClassLoader()) { currentContext = this.context; } else if (ccl != null) { currentContextPerThread.put(ccl, this.context); } if (logger.isInfoEnabled()) { long elapsedTime = System.currentTimeMillis() - startTime; logger.info(\"Root WebApplicationContext initialized in \" + elapsedTime + \" ms\"); } return this.context; } catch (Error | RuntimeException var8) { logger.error(\"Context initialization failed\", var8); servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, var8); throw var8; } }}","link":"/2020/01/15/spring/101/"},{"title":"Java JVM","text":"1 : java 内存区域 方法区 : 类信息,常量,static,JIT; (信息共享) java 堆区 : 实例对象 , GC; (信息共享) VM Stack : java 方法在运行的内存模型 PC : java 线程的私有数据,这个数据就是执行下一条指令的地址 2.java 内存模型 JMM( 规范,抽象的模型) 主内存: 共享的信息 工作类存 : 私有的信息 ,基本的数据类型,直接存放在工作空间,引用数据类型,引用的地址放在工作空间,引用的对象放在堆中 工作方式 : ​ A : 线程修改私有的数据 ,直接在工作空间修改 ​ B : 线程修改共享数据, 先把数据复制到工作空间,在工作空间进行修改,修改完成以后再刷新主存区的数据 3.硬件内存架构与java 内存模型硬件架构 :​ a : CPU 缓存的一致性问题 : 并发处理的不同步 ​ b : 解决方案 : ​ 总线加锁() 降低cpu 的吞吐量 ​ 缓存上的一致性协议(MESI) ​ 当cpu 在 cache 中 操作数据行, 如果该数据是共享变量 ,数据在cache 读到寄存器中, 进行修改,并更 新内存数据, ​ cache line 置无效,其它的cup就从内存中去读取数据 java 内存模型与硬件架构的关系​ ​ 交叉 : 数据的不一致 4. 并发编程的三个重要的特性​ 原子性: 不可分割 ​ 可见性: 线程只能操作自己工作空间的数据 ​ 有序性: 程序中的顺序不一定就是执行的顺序 ​ 编译重排序 ​ 指定重排序 ​ 提高效率 (和指令操作的时间有关系) ​ 重排规则 as-if-seria : 单线程中重排不影响执行的结果 ​ happens-before : 5. JMM对三个特征到的保证1) .JMM 与原子性​ a). x =10 写 原子性 如果是私有数据,具有原子性,如果是共享数据没有原子性 ​ b) .y=x ​ 把数据x 读到工作空间 (原子性) ​ 把 x 的值写到y (原子性) ​ c) i++ 没有原子性 ​ 读 i 到工作空间, ​ +1, ​ 刷新结果到内存 ​ d) Z=z+1 没有原子性 ​ 读 z到工作空间, ​ +1, ​ 刷新结果到内存 ​ 多个原子性操作合并到一起没有原子性 ​ 保证方式 : ​ synchronized ​ JUC : Lock 的 lock 2) . JMM与可见性​ Volatile : 在JMM模式上实现 EMSI协议 ​ synchronized : 加锁 ​ JUC : Lock 的 lock -3) .JMM有序性​ Volatile ​ synchronized ​ Happens-before原则： ​ 程序次序原则 ​ 锁定原则 ：后一次加锁必须等前一次解锁 ​ Volatile原则：霸道原则 ​ 传递原则：A—B —C A–C","link":"/2020/01/21/jvm/java%20JVM/"}],"tags":[],"categories":[{"name":"java","slug":"java","link":"/categories/java/"},{"name":"spring","slug":"spring","link":"/categories/spring/"},{"name":"JVM","slug":"JVM","link":"/categories/JVM/"}]}